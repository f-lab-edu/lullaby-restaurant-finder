name: CI/CD with Gradle

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "corretto"
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Test with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean test --stacktrace --parallel
      - name: Build with Gradle
        run: |
          ./gradlew bootJar --parallel
      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Docker Image Build & Push
        run: |
          docker build -f Dockerfile.develop . -t ${{ secrets.DOCKERHUB_REPO }}/restaurant-api:production
          docker push ${{ secrets.DOCKERHUB_REPO }}/restaurant-api:production
  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment: production
    steps:
      - name: Docker Pull & Run
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          command_timeout: 30m
          script: |
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKERHUB_REPO }}/restaurant-api:production
            docker run -e SPRING_PROFILES_ACTIVE=${{ secrets.SPRING_PROFILES_ACTIVE }} \
            -p 8080:8080 -dit ${{ secrets.DOCKERHUB_REPO }}/restaurant-api:production 
            docker image prune -f
